<Page
    x:Class="Microsoft.PowerToys.Settings.UI.Views.ColorPickerPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:controls="using:CommunityToolkit.WinUI.Controls"
    xmlns:converters="using:CommunityToolkit.WinUI.Converters"
    xmlns:custom="using:Microsoft.PowerToys.Settings.UI.Controls"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:models="using:Microsoft.PowerToys.Settings.UI.Library"
    xmlns:ui="using:CommunityToolkit.WinUI"
    xmlns:viewmodels="using:Microsoft.PowerToys.Settings.UI.ViewModels"
    x:Name="RootPage"
    d:DataContext="{d:DesignInstance Type=viewmodels:ColorPickerViewModel}"
    AutomationProperties.LandmarkType="Main"
    mc:Ignorable="d">

    <Page.Resources>
        <converters:BoolToVisibilityConverter x:Key="BoolToVis" />
    </Page.Resources>

    <custom:SettingsPageControl x:Uid="ColorPicker" ModuleImageSource="ms-appx:///Assets/Settings/Modules/ColorPicker.png">
        <custom:SettingsPageControl.ModuleContent>

            <StackPanel
                x:Name="ColorPickerView"
                ChildrenTransitions="{StaticResource SettingsCardsAnimations}"
                Orientation="Vertical">
                <controls:SettingsCard
                    x:Uid="ColorPicker_EnableColorPicker"
                    HeaderIcon="{ui:BitmapIcon Source=/Assets/Settings/FluentIcons/FluentIconsColorPicker.png}"
                    IsEnabled="{x:Bind Mode=OneWay, Path=ViewModel.IsEnabledGpoConfigured, Converter={StaticResource BoolNegationConverter}}">
                    <ToggleSwitch x:Uid="ToggleSwitch" IsOn="{x:Bind ViewModel.IsEnabled, Mode=TwoWay}" />
                </controls:SettingsCard>
                <InfoBar
                    x:Uid="GPO_IsSettingForced"
                    IsClosable="False"
                    IsOpen="{x:Bind Mode=OneWay, Path=ViewModel.IsEnabledGpoConfigured}"
                    IsTabStop="{x:Bind Mode=OneWay, Path=ViewModel.IsEnabledGpoConfigured}"
                    Severity="Informational" />

                <custom:SettingsGroup x:Uid="Shortcut" IsEnabled="{x:Bind Mode=OneWay, Path=ViewModel.IsEnabled}">
                    <controls:SettingsCard x:Uid="Activation_Shortcut" HeaderIcon="{ui:FontIcon Glyph=&#xEDA7;}">
                        <custom:ShortcutControl MinWidth="{StaticResource SettingActionControlMinWidth}" HotkeySettings="{x:Bind Path=ViewModel.ActivationShortcut, Mode=TwoWay}" />
                    </controls:SettingsCard>

                    <controls:SettingsCard x:Uid="ColorPicker_ActivationAction" HeaderIcon="{ui:FontIcon Glyph=&#xEC4E;}">
                        <ComboBox MinWidth="{StaticResource SettingActionControlMinWidth}" SelectedIndex="{x:Bind Path=ViewModel.ActivationBehavior, Mode=TwoWay}">
                            <ComboBoxItem x:Uid="EditorFirst" />
                            <ComboBoxItem x:Uid="ColorPickerFirst" />
                            <ComboBoxItem x:Uid="ColorPickerOnly" />
                        </ComboBox>
                    </controls:SettingsCard>

                </custom:SettingsGroup>

                <custom:SettingsGroup x:Uid="ColorFormats" IsEnabled="{x:Bind Mode=OneWay, Path=ViewModel.IsEnabled}">
                    <controls:SettingsCard x:Uid="ColorPicker_CopiedColorRepresentation" HeaderIcon="{ui:FontIcon Glyph=&#xF0E3;}">
                        <ComboBox
                            x:Name="ColorPicker_ComboBox"
                            MinWidth="{StaticResource SettingActionControlMinWidth}"
                            DisplayMemberPath="Value"
                            ItemsSource="{Binding ColorFormatsPreview, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                            Loaded="ColorPicker_ComboBox_Loaded"
                            SelectedIndex="{Binding ColorFormatsPreviewIndex, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                            SelectedValue="{Binding SelectedColorRepresentationValue, Mode=TwoWay}"
                            SelectedValuePath="Key" />
                    </controls:SettingsCard>

                    <controls:SettingsCard x:Uid="ColorPicker_ShowColorName">
                        <ToggleSwitch x:Uid="ToggleSwitch" IsOn="{Binding ShowColorName, Mode=TwoWay}" />
                    </controls:SettingsCard>
                    <!--
                Disabling this until we have a safer way to reset cursor as
                we can hit a state where the cursor doesn't reset

                <CheckBox x:Uid="ColorPicker_ChangeCursor"
                        IsChecked="{Binding ChangeCursor, Mode=TwoWay}"
                        Margin="{StaticResource SmallTopMargin}"
                        IsEnabled="{Binding IsEnabled}"/>
                    -->
                </custom:SettingsGroup>

                <custom:SettingsGroup x:Uid="ColorPicker_Editor" IsEnabled="{x:Bind Mode=OneWay, Path=ViewModel.IsEnabled}">
                    <controls:SettingsCard
                        x:Name="ColorFormatsSetting"
                        x:Uid="ColorPicker_ColorFormats"
                        HeaderIcon="{ui:FontIcon Glyph=&#xE762;}">
                        <Button
                            x:Uid="ColorPickerAddNewFormat"
                            HorizontalAlignment="Right"
                            Click="NewFormatClick"
                            Style="{StaticResource AccentButtonStyle}" />
                    </controls:SettingsCard>
                    <!--  Disabled reordering by dragging  -->
                    <!--  CanReorderItems="True" AllowDrop="True"  -->
                    <ItemsControl
                        HorizontalAlignment="Stretch"
                        AutomationProperties.Name="{Binding ElementName=ColorFormatsSetting, Path=Header}"
                        IsTabStop="False"
                        ItemsSource="{Binding ColorFormats, Mode=TwoWay}">
                        <ItemsControl.ItemTemplate>
                            <DataTemplate x:DataType="models:ColorFormatModel">
                                <controls:SettingsCard
                                    Margin="0,0,0,2"
                                    Click="EditButton_Click"
                                    Description="{x:Bind Example, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                    Header="{x:Bind Name, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                    IsActionIconVisible="False"
                                    IsClickEnabled="True">
                                    <controls:SettingsCard.Resources>
                                        <x:Double x:Key="SettingsCardLeftIndention">42</x:Double>
                                        <x:Double x:Key="SettingsCardActionButtonWidth">0</x:Double>
                                    </controls:SettingsCard.Resources>
                                    <StackPanel Orientation="Horizontal" Spacing="4">
                                        <ToggleSwitch
                                            x:Uid="Enable_ColorFormat"
                                            AutomationProperties.HelpText="{x:Bind Name}"
                                            IsOn="{x:Bind IsShown, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                            OffContent=""
                                            OnContent="" />

                                        <Button
                                            x:Uid="More_Options_Button"
                                            Grid.Column="1"
                                            VerticalAlignment="Center"
                                            Content="&#xE712;"
                                            FontFamily="{ThemeResource SymbolThemeFontFamily}"
                                            Style="{StaticResource SubtleButtonStyle}">
                                            <Button.Flyout>
                                                <MenuFlyout>
                                                    <MenuFlyoutItem
                                                        x:Uid="MoveUp"
                                                        Click="ReorderButtonUp_Click"
                                                        Icon="{ui:FontIcon Glyph=&#xE74A;}"
                                                        IsEnabled="{x:Bind CanMoveUp, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                                                    <MenuFlyoutItem
                                                        x:Uid="MoveDown"
                                                        Click="ReorderButtonDown_Click"
                                                        Icon="{ui:FontIcon Glyph=&#xE74B;}"
                                                        IsEnabled="{x:Bind CanMoveDown, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                                                    <MenuFlyoutSeparator />
                                                    <MenuFlyoutItem
                                                        x:Uid="RemoveItem"
                                                        Click="RemoveButton_Click"
                                                        Icon="{ui:FontIcon Glyph=&#xE74D;}"
                                                        IsEnabled="{x:Bind CanBeDeleted, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                                                </MenuFlyout>
                                            </Button.Flyout>
                                            <ToolTipService.ToolTip>
                                                <TextBlock x:Uid="More_Options_ButtonTooltip" />
                                            </ToolTipService.ToolTip>
                                        </Button>
                                    </StackPanel>
                                </controls:SettingsCard>
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>
                </custom:SettingsGroup>
                <ContentDialog
                    x:Name="ColorFormatDialog"
                    x:Uid="ColorFormatDialog"
                    IsPrimaryButtonEnabled="{Binding IsValid, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                    PrimaryButtonStyle="{ThemeResource AccentButtonStyle}"
                    SecondaryButtonClick="ColorFormatDialog_CancelButtonClick">
                    <ContentDialog.DataContext>
                        <models:ColorFormatModel />
                    </ContentDialog.DataContext>
                    <ScrollViewer HorizontalScrollBarVisibility="Auto" HorizontalScrollMode="Auto">
                        <custom:ColorFormatEditor
                            Width="480"
                            Margin="2,0,0,0"
                            HorizontalAlignment="Left"
                            PropertyChanged="ColorFormatEditor_PropertyChanged" />
                    </ScrollViewer>
                </ContentDialog>
            </StackPanel>
        </custom:SettingsPageControl.ModuleContent>

        <custom:SettingsPageControl.PrimaryLinks>
            <custom:PageLink x:Uid="LearnMore_ColorPicker" Link="https://aka.ms/PowerToysOverview_ColorPicker" />
        </custom:SettingsPageControl.PrimaryLinks>
        <custom:SettingsPageControl.SecondaryLinks>
            <custom:PageLink Link="https://github.com/martinchrzan/ColorPicker/" Text="Martin Chrzan's Color Picker" />
            <custom:PageLink Link="https://medium.com/@Niels9001/a-fluent-color-meter-for-powertoys-20407ededf0c" Text="Niels Laute's UX concept" />
        </custom:SettingsPageControl.SecondaryLinks>
    </custom:SettingsPageControl>
</Page>
<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAIAICAAAAAAGACoDAAAJgAAABAQAAAAABgAaAMAAM4MAAAoAAAAIAAAAEAAAAABABgAAAAAAAAM
        AAAAAAAAAAAAAAAAAAAAAAAAuamfwamfxrS23c/O8ujl9+7q7+Xg49fR18zE1crD18/I2NDL2NLM2dPN
        2dTPw7y2uKacwamfxrS23c/O8ujl9+7q7+Xg49fR18zE1crD18/I2NDL2NLM2dPN2dTPwrqzx6uglXVi
        7qYbtIdFZ0pBbVBBcVVHdFpOd2BUemRYe2hcfGpgfm1jf3FlfW1j6ejmxKWZlXVi7qYbtIdFZ0pBbVBB
        cVVHdFpOd2BUemRYe2hcfGpgfm1jf3FlfW1j5uLfw6afuo1bWKScp4hBZUlAYkc4ZEo5Y0w7ZU08ZU4+
        ZlBAZlJAZ1NDZlNDYU076eflwKGYuo1bWKScp4hBZUlAYkc4ZEo5Y0w7ZU08ZU4+ZlBAZlJAZ1NDZlND
        YU075uHew6adtJp9gHhQspJdsp2UsZuOrpyRrp6Srp6UsKKXsaKYsaSYsqSasqWasKOX4t/cwKCWtJp9
        gHhQyp9kzqqZzamUs5+Srp6Srp6UsKKXsaKYsaSYsqSasqWasKOX39nVw6qhw29E2JRq4nU64WUb5G0n
        6HUu63027oU/8oxG9ZRN95pU+qFb/aZg/6le2NzfwKSbw29E/59qAAAAAAAAAAAAyWUn8X837oU/8oxG
        9ZRN95pU+qFb/aZg/6le1dbZxKuivm5Cyl8m1mAf22on3XAv4Xc25H4954VE6oxL7ZNS75lZ8p9f9KRj
        +qdi19vewaWczms7PnhlAFVVAGJiAAACx2gu6YE+54VE6oxL7ZNS75lZ8p9f9KRj+qdi1dbXxKqhwnZO
        zWs22GMk22gm3G4t33U04nw75YNC6IpJ65FQ7pdX8J1d9KNi+aVg19ncwaWb2nNFAHyBAqenAJOTAAAF
        xWUr6H885YNC6IpJ65FQ7pdX8J1d9KNi+aVg1dTWw6qhw3hRz3RC12Uo2mcl3G0s33Qz4ns55YJB6YlI
        7JBP7ZZV8Zxc86Ji96Vg1tfawaWb83ZFAGprEv//AaKiAAABv2Eo53465YJB6YlI7JBP7ZZV8Zxc86Ji
        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
        AA4RoZWRyqyjwnhR1YRZ3HhC2mor22sp3XEu4Hc25H4954VF6oxM7ZNS75lZ8p9f+KJe0c3OxKigwXNM
        1oZb34RT3HM422sq3m8u4XU05Hw754NC7YtI5JFTAH+GAFVWRxsF7ePfwqSbwXNM1oZb34RT3HM422sq
        3m8u4XU05Hw754NC6opJ7JFQ75dX8p9d96Fcz8nKw6igvm5F1YZc3ohZ3XtE224w3W0s3nMy4Xo65IFB
        64lH4ZNUAImSAAAA/75t0MrLwaSbvm5F1YZc3ohZ3XtE224w3W0s3nMy4Xo65IFB54hI6Y9P7JVW751b
        9Z9azsbGxKmgtmE0z4JZ14he14NW03M90Gov0m0v1HE01ng73YFE0HxCAAAA/7Ro55VUzsfGwqactmE0
        z4JZ14he14NW03M90Gov0m0v1HE01ng72X9D3IZI34tP4ZJU55VUzMPCxaqhrFAhxntVzoRbzoJbyXdJ
        wmgzwGIpwWUsw2sxyHI4xnU8hVAr1YdK0IVGz8TDw6edrFAhxntVzoRbzoJbyXdJwmgzwGIpwWUsw2sx
        x3E4yHc9y3xDzYJI0IVGzsG/xKSbokQXtGdEu3RSvXhXvHdWuXBKtWhBtmo/t21EuXNJvXpRyIdbxIpi
        y49nz8C7w6GYokQXtGdEu3RSvXhXvHdWuXBKtWhBtmo/t21EuXNJvHlRwIJZxIpiy49nzb230snGyriy
        y7q0yrmyyriyybmzybiyybqz0MK93dHN6N7c6uDf4NbT0sXAxravuqmg1MzJyriyy7q0yrmyyriyybmz
        ybiyybqz0MK93dHN6N7c6uDf4NbT0sXAxravvKyjAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoAAAAEAAAACAAAAABABgAAAAAAAAD
        AAAAAAAAAAAAAAAAAAAAAAAAsZqU4bR1sJ+es6CXqpmPraGZraOaxcG+r5SN4bR1rp6ds6CXqpmPraGZ
        raObw7u2xKGKdI5ge2lpeG5meXBpenJqdmxktLKvwJqCjZZhq35vem9meXBpenJqdmxls6ymv4124W0y
        6mcY83ov+YtB/5pQ/6ZX9NCtzoRpS047AAAA/nws+4xB/5pQ/6ZX7cajwZWC0mIk22gn4Hg35oZG7JNT
        +KBb6Mir+oRhALa+AEhW6nEs54dG7JNT851a5MCiwJN/2npH2WUi33My5oNC75JR0IFF98alaXp5AOPn
        bRAA83435YJC7JBP85pW47yev45534lb3W8w4W8t54A//5lSABce/+SwCKGkAGZuxlch5nIu54A/7I5N
        9JpV4riZtnxg0IFV0ntNxl8gyGYn5nAqALG+XiwrAOboFSwp/5Rg02opyGUmznM01H071KmKw6CSvZCB
        wpiHvpJ+yqCL8bKdAMnOAIODACkqKAAAOSAVWz4v1amU27Wk0a6aw6marpmT5Lh2sKOjs6SdppiRupiR
        ALm7AP//AHZ2AKusABwez7auppiRp52XqKKcw7+6xKGKdI5ge2lpeG5lenBpjGlgAMbIAN3dAHh3AFhg
        impje3BoeXBpe3Jqdmxls6umv4124W0y6mcY83ov+YtB/5VDAMbTAKOiAHJ7qjkJ928g8nov+YtB/5pQ
        /6ZX7cajwZWC0mIk22gn4Hg35oZG/49HANPhAIKEMSAY8HQz2mgn4Hg35oZG7JNT851a5MCiwJN/2npH
        2WUi33My5oNC/5VMAHyKCi0y+Led2HhF2WUi33My5oNC7JBP85pW47yev45534lb3W8w4W8t54A//5hP
        AEFX6beWvIdy34lc3W8w4W8t54A/7I5N9JpV4riZt3xg0IBV0XtMxl8gyGYn03Qzk08c5biVsnVZ0IFV
        0XtMxl8gyGYnznM01H071KmKwZ6Qv5SBwp2NvZWExZ+M1LOi17SfxK6iwZyPv5SBwp2NvZWExZ+M1LKi
        zK6bw6yfAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAA==
</value>
  </data>
</root>